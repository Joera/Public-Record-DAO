import "../services/types.aqua"
import "./prdao.products.aqua"

service ConfigService("service-id"):
    service: string, string -> ServiceConfig
    confirm: string, string, string, string -> bool
    error: string, string, string -> bool

service LogService("service-id"):
    logger: string, string -> bool

service EventFilterService("service-id"):
    poll: string, SubscriptionV2, string, string -> []string
    new: SubscriptionV2, string, string  -> string

service EnsService("service-id"):
    get_record: string, string, string, string -> string
    prepare_request: string, string, string, string, string, string -> string
    prepare_request_with_u64: string, string, string, string, u64, string -> string
    get_tx_count: string, string, string -> i64
    make_request: string, string, string -> JsonRpcResult
    make_batch_request: *string, string, string -> JsonRpcResult

service SignerService("service-id"):
    initiate() -> string
    initiate_dev() -> []string
    from_secret: string -> []string
    address() -> string
    sign_tx: string, u64 -> string

service FsService("service-id"):
    read_file: string -> string

service GraphService("service-id"):
    get: string, DataModel, SubscriptionV2, string, string -> IpldObject

service IpldService("service-id"):
    update: string,*IpldObject, string, string -> string

service IpnsService("service-id"):
    get: string -> string
    update: string, string  -> string
    perpetuate: string -> string
    key: string -> string

service SubscriptionService("service-id"):
    -- get: u16, string -> Subscription
    getAll: string, string, string -> []SubscriptionV2

service DataModelService("service-id"):
    get: u16, string -> DataModel

service HtmlService("service-id"):
    render: IpldObject, string, string, string -> IpldObject

service IpfsService("service-id"):
    render: IpldObject, string, string -> IpldObject

service DnsService("service-id"):
    update: string, string -> string